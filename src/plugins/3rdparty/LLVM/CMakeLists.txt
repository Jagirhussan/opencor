PROJECT(LLVMPlugin)

INCLUDE(cmake/common.cmake)

# Retrieve the plugin's binary file(s)

STRING(REPLACE "${${CMAKE_PROJECT_NAME}_SOURCE_DIR}/" "" RELATIVE_PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR}")

IF(WIN32)
    IF(RELEASE_MODE)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} LLVM.dll 54795261aa340df611a14e2bef8f53648522a1e9)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} LLVM.lib cd4aec0c287fcc5ef0ca7f984d1bddb19a713b15)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} LLVM.dll d08ead901d1fae19bccf1987916df9ea6a5a321b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} LLVM.lib 420057fd16418a8d1e974a60c6c7bb8e3f685a97)
    ENDIF()
ELSEIF(APPLE)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libLLVM.dylib c0cc352e415c152d8649188b43eca190645acf3d)
ELSE()
    IF(${ARCHITECTURE} EQUAL 32)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libLLVM.so ef5b1364736ae1d2daa4dac6cd7b7da3a6cb7c79)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libLLVM.so 6034d53d22a6679856f998dbe6109f39e4c9a6c0)
    ENDIF()
ENDIF()

# Add the plugin as a binary
# Note: in the case of Windows, LLVM_BINARY_PLUGIN must refer to the
#       distribution directory as opposed to the main build directory since we
#       need the .lib file and it's only there, so...

IF(WIN32)
    SET(LLVM_BINARY_PLUGIN
        ${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR}/${CMAKE_IMPORT_LIBRARY_PREFIX}LLVM${CMAKE_IMPORT_LIBRARY_SUFFIX}

        PARENT_SCOPE
    )
ELSE()
    SET(LLVM_BINARY_PLUGIN
        ${PROJECT_BUILD_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}LLVM${CMAKE_SHARED_LIBRARY_SUFFIX}

        PARENT_SCOPE
    )
ENDIF()

ADD_PLUGIN_BINARY(LLVM
    INCLUDE_DIRS
        include
        src
        tools/clang/include
    QT_LIBRARIES
        QtCore
)

def model{cellml_1_1_cmeta_id} cellml_1_1 as
    // A comment can fit on one line...

    // A comment can also fit
    // on one, two or even
    // more lines...

    // In between comment #1...

    def import{my_import_cmeta_id} using "imported_model.cellml" for
        // Comments can be within an import definition...

        // In between comment #2...

        // Comments can be within a unit import,
        // but if kept it will be serialised back in the
        // corresponding import definition...

        unit{my_imported_unit_cmeta_id} my_imported_unit using unit my_reference_unit;

        // In between comment #3...

        // Comments can be within a component import,
        // but if kept it will be serialised back in the
        // corresponding import definition...

        comp{my_imported_component_cmeta_id} my_imported_component using comp my_reference_component;
    enddef;

    // In between comment #4...

    // Comments can be within a base unit definition,
    // but if kept it will be serialised back in the
    // corresponding model definition...

    def unit{my_base_unit_cmeta_id} my_base_unit as base unit;

    // In between comment #5...

    def unit{my_unit_cmeta_id} my_unit as
        // Comments can be within a unit definition...

        // In between comment #6...

        // Comments can be within a unit statement,
        // but if kept it will be serialised back in the
        // corresponding unit definition...

        unit{some_unit_cmeta_id} some_unit;
    enddef;

    // In between comment #7...

    def comp{my_component_cmeta_id} my_component as
        // Comments can be within a component definition...

        // In between comment #8...

        // Comments can be within a variable declaration,
        // but if kept it will be serialised back in the
        // corresponding component definition...

        var{my_variable1_cmeta_id} my_variable1: my_unit;
        var{my_variable2_cmeta_id} my_variable2: my_unit {init: my_variable1};

        // In between comment #9...

        // In between comment #10...

        // In between comment #11...

        // In between comment #12...

        // In between comment #13...

        a ={my_equation1_cmeta_id} 5{???};

        // In between comment #14...

        // In between comment #15...

        // In between comment #16...

        // In between comment #17...

        // In between comment #18...

        a ={my_equation2_cmeta_id} 12.3e5{dimensionless};

        // In between comment #19...

        // In between comment #20...

        // In between comment #21...

        // In between comment #22...

        // In between comment #32...

        a ={my_equation3_cmeta_id} ode(f, t, 2{dimensionless});

        // In between comment #33...

        // In between comment #34...

        // In between comment #35...

        // In between comment #36...

        // In between comment #37...

        a ={my_equation4_cmeta_id} nan;

        // In between comment #38...

        // In between comment #39...

        // In between comment #40...

        // In between comment #41...

        // In between comment #42...

        a ={my_equation5_cmeta_id} inf;

        // In between comment #43...
    enddef;

    // In between comment #44...

    def group{my_group_cmeta_id} as containment{my_containment1_cmeta_id} my_containment1 and containment{my_containment2_cmeta_id} my_containment2 and encapsulation{my_encapsulation_cmeta_id} for
        // Comments can be within a group definition...

        // In between comment #45...

        // Comments can be within a relationship reference,
        // but if kept it will be serialised back in the
        // corresponding group definition...

        // In between comment #46...

        // Comments can be within a relationship reference,
        // but if kept it will be serialised back in the
        // corresponding group definition...

        // In between comment #47...

        // Comments can be within a relationship reference,
        // but if kept it will be serialised back in the
        // corresponding group definition...

        // In between comment #48...

        comp{my_component1_cmeta_id} my_component1 incl
            // Comments can be within a component reference
            // with component reference children...

            // In between comment #49...

            // Comments can be within a component reference
            // without component reference children, but
            // if kept it will be serialised back in the
            // corresponding group definition...

            comp{my_component11_cmeta_id} my_component11;

            // In between comment #50...

            // Comments can be within a component reference
            // without component reference children, but
            // if kept it will be serialised back in the
            // corresponding group definition...

            comp{my_component12_cmeta_id} my_component12;
            comp my_component13;
        endcomp;

        // In between comment #51...

        comp{my_component2_cmeta_id} my_component2 incl
            // Comments can be within a component reference
            // with component reference children...

            // In between comment #52...

            // Comments can be within a component reference
            // without component reference children, but
            // if kept it will be serialised back in the
            // corresponding group definition...

            comp{my_component21_cmeta_id} my_component21;

            // In between comment #53...

            // Comments can be within a component reference
            // without component reference children, but
            // if kept it will be serialised back in the
            // corresponding group definition...

            comp{my_component22_cmeta_id} my_component22;
            comp my_component23;
        endcomp;
    enddef;

    // In between comment #54...

    def map{my_connection_cmeta_id} between{my_map_components_cmeta_id} my_component1 and my_component2 for
        // Comments can be within a connection definition...

        // In between comment #55...

        // Comments can be within a component mapping,
        // but if kept it will be serialised back in the
        // corresponding connection definition...

        // In between comment #56...

        // Comments can be within a variable mapping,
        // but if kept it will be serialised back in the
        // corresponding connection definition...

        vars{my_map_variables1_cmeta_id} my_variable11 and my_variable12;

        // In between comment #57...

        // Comments can be within a variable mapping,
        // but if kept it will be serialised back in the
        // corresponding connection definition...

        vars{my_map_variables2_cmeta_id} my_variable21 and my_variable22;
        vars my_variable31 and my_variable32;
    enddef;
enddef;

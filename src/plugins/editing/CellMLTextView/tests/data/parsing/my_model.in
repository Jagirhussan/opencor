def model{my_model_cmeta_id} my_model as
    // A comment can fit on one line...

    // A comment can also fit
    // on one, two or even
    // more lines...

    def import{my_import1_cmeta_id} using "imported_model.cellml" for
    enddef;

    // In between comment...

    def import{my_import2_cmeta_id} using "imported_model.cellml" for
        // In between comment...

        unit{my_imported_unit1_cmeta_id} my_imported_unit1 using unit my_reference_unit1;

        // In between comment...

        comp{my_imported_component1_cmeta_id} my_imported_component1 using comp my_reference_component1;
        comp{my_imported_component2_cmeta_id} my_imported_component2 using comp my_reference_component2;

        // In between comment...

        unit{my_imported_unit2_cmeta_id} my_imported_unit2 using unit my_reference_unit2;

        // In between comment...
    enddef;

    // In between comment...

    def unit{my_base_unit_cmeta_id} my_base_unit as base unit;

    // In between comment...

    def unit{my_unit1_cmeta_id} my_unit1 as
    enddef;

    // In between comment...

    def unit{my_unit2_cmeta_id} my_unit2 as
        // In between comment...

        unit{second_cmeta_id} second;

        // In between comment...

        unit some_unit {pref: milli};

        // In between comment...

        unit some_unit {pref: 3};

        // In between comment...

        unit some_unit {pref: +3};

        // In between comment...

        unit some_unit {pref: -3};

        // In between comment...

        unit some_unit {expo: 3};

        // In between comment...

        unit some_unit {mult: 3};

        // In between comment...

        unit some_unit {off: 3};

        // In between comment...

        unit some_unit {pref: milli, expo: 3, mult: +5, off: -7};

        // In between comment...
    enddef;

    // In between comment...

    def comp{my_component1_cmeta_id} my_component1 as
    enddef;

    // In between comment...

    def comp{my_component2_cmeta_id} my_component2 as
        // In between comment...

        var{my_variable1_cmeta_id} my_variable1: some_unit;

        // In between comment...

        var{my_variable2_cmeta_id} my_variable2: second;

        // In between comment...

        var{my_variable3_cmeta_id} my_variable3: some_unit {init: 3};

        // In between comment...

        var{my_variable4_cmeta_id} my_variable4: some_unit {init: +3};

        // In between comment...

        var{my_variable5_cmeta_id} my_variable5: some_unit {init: -3};

        // In between comment...

        var{my_variable6_cmeta_id} my_variable6: some_unit {pub: in, priv: out};

        // In between comment...

        var{my_variable7_cmeta_id} my_variable7: some_unit {pub: none};

        // In between comment...

        a = sel
            otherwise:
                other_expression;
            case condition1:
                expression1;
            case condition2:
                expression2;
        endsel;

        // In between comment...

        a = sel
            case condition1:
                expression1;
            otherwise:
                other_expression;
            case condition2:
                expression2;
        endsel;

        // In between comment...

        a = sel
            case condition1:
                expression1;
            case condition2:
                expression2;
            otherwise:
                other_expression;
        endsel;

        // In between comment...

        var my_variable8: some_unit;

        // In between comment...

        a = sel
            case condition1:
                expression1;
            case condition2:
                expression2;
            otherwise:
                other_expression;
        endsel;

        // In between comment...

        a = b;

        // In between comment...

        a = ode(b, t);
        a = ode(b, t, 2{dimensionless});

        // In between comment...

        a = 3.5{second};

        // In between comment...

        a = b or c;
        a = b and c;
        a = b xor c;
        a = b == c;
        a = b <> c;
        a = b < c;
        a = b > c;
        a = b <= c;
        a = b >= c;
        a = b+c;
        a = b+c+d;
        a = b-c;
        a = b-c-d;
        a = b*c;
        a = b*c*d;
        a = b/c;
        a = b/c/d;
        a = not b;
        a = +b;
        a = -b;
        a = true;
        a = false;
        a = nan;
        a = pi;
        a = inf;
        a = e;

        // In between comment...
    enddef;

    // In between comment...

    def group as containment for
        // In between comment...

        comp my_component1 incl
            // In between comment...

            comp my_component11 incl
                // In between comment...

                comp my_component111;

                // In between comment...

                comp my_component112;

                // In between comment...
            endcomp;

            // In between comment...
        endcomp;

        // In between comment...
    enddef;

    // In between comment...

    def group as containment my_containment for
        comp my_component1 incl
            comp my_component12 incl
                comp my_component121;
            endcomp;

            comp my_component13;
        endcomp;
    enddef;

    // In between comment...

    def group as encapsulation for
        comp my_component11 incl
            comp my_component111;
            comp my_component112;
        endcomp;

        comp my_component12 incl
            comp my_component121;
        endcomp;
    enddef;

    // In between comment...

    def group as encapsulation and containment my_containment for
        comp my_component;
    enddef;

    // In between comment...

    def map{my_connection_cmeta_id} between{my_map_components_cmeta_id} my_component1 and my_component2 for
        // In between comment...

        vars{my_map_variables1_cmeta_id} my_variable11 and my_variable21;

        // In between comment...

        vars{my_map_variables2_cmeta_id} my_variable12 and my_variable22;

        // In between comment...

        vars{my_map_variables3_cmeta_id} my_variable13 and my_variable23;

        // In between comment...
    enddef;
enddef;

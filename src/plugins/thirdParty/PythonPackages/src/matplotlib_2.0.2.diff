diff --git lib/matplotlib/backend_bases.py lib/matplotlib/backend_bases.py
index bc5257bab..caf14dc54 100644
--- lib/matplotlib/backend_bases.py
+++ lib/matplotlib/backend_bases.py
@@ -1692,6 +1692,7 @@ class FigureCanvasBase(object):
                          'Tagged Image File Format')
 
     def __init__(self, figure):
+        super(FigureCanvasBase, self).__init__()
         self._is_idle_drawing = True
         self._is_saving = False
         figure.set_canvas(self)
@@ -2610,6 +2611,7 @@ class FigureManagerBase(object):
         The figure number
     """
     def __init__(self, canvas, num):
+        super(FigureManagerBase, self).__init__()
         self.canvas = canvas
         canvas.manager = self  # store a pointer to parent
         self.num = num
diff --git lib/matplotlib/backends/backend_qt5.py lib/matplotlib/backends/backend_qt5.py
index 1fa7f9f03..79ea0bf6b 100644
--- lib/matplotlib/backends/backend_qt5.py
+++ lib/matplotlib/backends/backend_qt5.py
@@ -26,7 +26,7 @@ from matplotlib.widgets import SubplotTool
 import matplotlib.backends.qt_editor.figureoptions as figureoptions
 
 from .qt_compat import (QtCore, QtGui, QtWidgets, _getSaveFileName,
-                        __version__, is_pyqt5)
+                        __version__, is_qt5, is_pyqt5)
 from matplotlib.backends.qt_editor.formsubplottool import UiSubplotTool
 
 backend_version = __version__
@@ -128,9 +128,9 @@ def _create_qApp():
         if DEBUG:
             print("Starting up QApplication")
         app = QtWidgets.QApplication.instance()
-        if app is None:
+        if is_pyqt5() and app is None:
             # check for DISPLAY env variable on X11 build of Qt
-            if is_pyqt5():
+            if is_qt5():
                 try:
                     from PyQt5 import QtX11Extras
                     is_x11_build = True
@@ -148,7 +148,7 @@ def _create_qApp():
         else:
             qApp = app
 
-    if is_pyqt5():
+    if is_qt5():
         try:
             qApp.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps)
             qApp.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
@@ -158,10 +158,11 @@ def _create_qApp():
 
 class Show(ShowBase):
     def mainloop(self):
-        # allow KeyboardInterrupt exceptions to close the plot window.
-        signal.signal(signal.SIGINT, signal.SIG_DFL)
-        global qApp
-        qApp.exec_()
+        if is_pyqt5():
+            # allow KeyboardInterrupt exceptions to close the plot window.
+            signal.signal(signal.SIGINT, signal.SIG_DFL)
+            global qApp
+            qApp.exec_()
 
 
 show = Show()
@@ -219,8 +220,9 @@ class TimerQT(TimerBase):
     def _timer_stop(self):
         self._timer.stop()
 
-
-class FigureCanvasQT(QtWidgets.QWidget, FigureCanvasBase):
+# PythonQt stops initialising superclasses after one of its classes
+# so we've changed the order...
+class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):
 
     # map Qt button codes to MouseEvent's ones:
     buttond = {QtCore.Qt.LeftButton: 1,
@@ -440,8 +442,16 @@ class FigureCanvasQT(QtWidgets.QWidget, FigureCanvasBase):
 class MainWindow(QtWidgets.QMainWindow):
     closing = QtCore.Signal()
 
+    def __init__(self):
+        QtGui.QMainWindow.__init__(self)
+        self._closeCallbacks = []
+
+    def connectClosing(self, callback):
+        self._closeCallbacks.append(callback)
+
     def closeEvent(self, event):
-        self.closing.emit()
+        for callback in self._closeCallbacks:
+            callback()
         QtWidgets.QMainWindow.closeEvent(self, event)
 
 
@@ -458,11 +468,12 @@ class FigureManagerQT(FigureManagerBase):
     def __init__(self, canvas, num):
         if DEBUG:
             print('FigureManagerQT.%s' % fn_name())
-        FigureManagerBase.__init__(self, canvas, num)
+        super(FigureManagerQT, self).__init__(canvas, num)
         self.canvas = canvas
         self.window = MainWindow()
-        self.window.closing.connect(canvas.close_event)
-        self.window.closing.connect(self._widgetclosed)
+        self.window.setAttribute(QtCore.Qt.WA_DeleteOnClose)
+        self.window.connectClosing(canvas.close_event)
+        self.window.connectClosing(self._widgetclosed)
 
         self.window.setWindowTitle("Figure %d" % num)
         image = os.path.join(matplotlib.rcParams['datapath'],
@@ -576,7 +587,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
     def __init__(self, canvas, parent, coordinates=True):
         """ coordinates: should we show the coordinates on the right? """
         self.canvas = canvas
-        self.parent = parent
+        self._parent = parent
         self.coordinates = coordinates
         self._actions = {}
         """A mapping of toolitem method names to their QActions"""
@@ -585,7 +596,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
         NavigationToolbar2.__init__(self, canvas)
 
     def _icon(self, name):
-        if is_pyqt5():
+        if is_qt5():
             name = name.replace('.png', '_large.png')
         pm = QtGui.QPixmap(os.path.join(self.basedir, name))
         if hasattr(pm, 'setDevicePixelRatio'):
@@ -632,16 +643,16 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
         # Esthetic adjustments - we need to set these explicitly in PyQt5
         # otherwise the layout looks different - but we don't want to set it if
         # not using HiDPI icons otherwise they look worse than before.
-        if is_pyqt5():
+        if is_qt5():
             self.setIconSize(QtCore.QSize(24, 24))
             self.layout().setSpacing(12)
 
-    if is_pyqt5():
+    if is_qt5():
         # For some reason, self.setMinimumHeight doesn't seem to carry over to
         # the actual sizeHint, so override it instead in order to make the
         # aesthetic adjustments noted above.
         def sizeHint(self):
-            size = super(NavigationToolbar2QT, self).sizeHint()
+            size = QtWidgets.QToolBar.sizeHint(self)
             size.setHeight(max(48, size.height()))
             return size
 
@@ -714,7 +725,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
     def configure_subplots(self):
         image = os.path.join(matplotlib.rcParams['datapath'],
                              'images', 'matplotlib.png')
-        dia = SubplotToolQt(self.canvas.figure, self.parent)
+        dia = SubplotToolQt(self.canvas.figure, self._parent)
         dia.setWindowIcon(QtGui.QIcon(image))
         dia.exec_()
 
@@ -737,7 +748,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
             filters.append(filter)
         filters = ';;'.join(filters)
 
-        fname, filter = _getSaveFileName(self.parent,
+        fname, filter = _getSaveFileName(self._parent,
                                          "Choose a filename to save to",
                                  start, filters, selectedFilter)
         if fname:
@@ -761,7 +772,7 @@ class SubplotToolQt(SubplotTool, UiSubplotTool):
         UiSubplotTool.__init__(self, None)
 
         self.targetfig = targetfig
-        self.parent = parent
+        self._parent = parent
         self.donebutton.clicked.connect(self.close)
         self.resetbutton.clicked.connect(self.reset)
         self.tightlayout.clicked.connect(self.functight)
diff --git lib/matplotlib/backends/qt_compat.py lib/matplotlib/backends/qt_compat.py
index 085908443..8feda278e 100644
--- lib/matplotlib/backends/qt_compat.py
+++ lib/matplotlib/backends/qt_compat.py
@@ -14,9 +14,10 @@ QT_API_PYQT = 'PyQt4'       # API is not set here; Python 2.x default is V 1
 QT_API_PYQTv2 = 'PyQt4v2'   # forced to Version 2 API
 QT_API_PYSIDE = 'PySide'    # only supports Version 2 API
 QT_API_PYQT5 = 'PyQt5'       # use PyQt5 API; Version 2 with module shim
+QT_API_PYTHONQT = 'PythonQt' # use PythonQt API for Qt5
 
 ETS = dict(pyqt=(QT_API_PYQTv2, 4), pyside=(QT_API_PYSIDE, 4),
-           pyqt5=(QT_API_PYQT5, 5))
+           pyqt5=(QT_API_PYQT5, 5), pythonqt=(QT_API_PYTHONQT, 5))
 # ETS is a dict of env variable to (QT_API, QT_MAJOR_VERSION)
 # If the ETS QT_API environment variable is set, use it, but only
 # if the varible if of the same major QT version.  Note that
@@ -58,6 +59,10 @@ if 'PyQt5' in sys.modules:
     # the user has imported PyQt5 before importing mpl
     QT_API = QT_API_PYQT5
 
+if 'PythonQt' in sys.modules:
+    # the user has imported PyQt5 before importing mpl
+    QT_API = QT_API_PYTHONQT
+
 if (QT_API_ENV is not None) and QT_API is None:
     try:
         QT_ENV_MAJOR_VERSION = ETS[QT_API_ENV][1]
@@ -185,9 +190,32 @@ if QT_API == QT_API_PYSIDE:  # try importing pyside
 
     _getSaveFileName = QtGui.QFileDialog.getSaveFileName
 
+elif QT_API == QT_API_PYTHONQT:  # try importing PythonQt
+    from PythonQt import QtCore, QtGui
+    __version__ = "3.2"
+    __version_info__ = "-"
+
+    # PythonQt does not yet support a getSaveFileName variant returning the selected filter
+    def _getSaveFileName(*args, **kwargs):
+        return (QtGui.QFileDialog.getSaveFileName(*args, **kwargs), None)
+
+    # Provide color getters
+    def getHslF(c):
+        return (c.hslHueF(), c.hslSaturationF(), c.lightnessF(), c.alphaF())
+
+    def getHsvF(c):
+        return (c.hueF(), c.saturationF(), c.valueF(), c.alphaF())
+
+    def getRgbF(c):
+        return (c.redF(), c.greenF(), c.blueF(), c.alphaF())
+
+    QtGui.QColor.getHslF = getHslF
+    QtGui.QColor.getHsvF = getHsvF
+    QtGui.QColor.getRgbF = getRgbF
+
 
 # Apply shim to Qt4 APIs to make them look like Qt5
-if QT_API in (QT_API_PYQT, QT_API_PYQTv2, QT_API_PYSIDE):
+if QT_API in (QT_API_PYQT, QT_API_PYQTv2, QT_API_PYSIDE, QT_API_PYTHONQT):
     '''Import all used QtGui objects into QtWidgets
 
     Here I've opted to simple copy QtGui into QtWidgets as that
@@ -198,5 +226,8 @@ if QT_API in (QT_API_PYQT, QT_API_PYQTv2, QT_API_PYSIDE):
     QtWidgets = QtGui
 
 
+def is_qt5():
+    return QT_API in [QT_API_PYQT5, QT_API_PYTHONQT]
+
 def is_pyqt5():
     return QT_API == QT_API_PYQT5
diff --git lib/matplotlib/backends/qt_editor/formlayout.py lib/matplotlib/backends/qt_editor/formlayout.py
index 00a1a03a3..fa1bc5ad3 100644
--- lib/matplotlib/backends/qt_editor/formlayout.py
+++ lib/matplotlib/backends/qt_editor/formlayout.py
@@ -74,8 +74,9 @@ class ColorButton(QtWidgets.QPushButton):
 
     def choose_color(self):
         color = QtWidgets.QColorDialog.getColor(
-            self._color, self.parentWidget(), "",
-            QtWidgets.QColorDialog.ShowAlphaChannel)
+            self._color, self.parentWidget(), "")
+        ## PythonQt doesn't support QColorDialog.ColorDialogOptions
+        ##    QtWidgets.QColorDialog.ShowAlphaChannel)
         if color.isValid():
             self.set_color(color)
 
@@ -207,7 +208,7 @@ class FontLayout(QtWidgets.QGridLayout):
 
 def is_edit_valid(edit):
     text = edit.text()
-    state = edit.validator().validate(text, 0)[0]
+    state = edit.validator().validate(text, 0)
 
     return state == QtGui.QDoubleValidator.Acceptable
 
diff --git lib/matplotlib/backends/qt_editor/formsubplottool.py lib/matplotlib/backends/qt_editor/formsubplottool.py
index ee92cae41..05b62d1c5 100644
--- lib/matplotlib/backends/qt_editor/formsubplottool.py
+++ lib/matplotlib/backends/qt_editor/formsubplottool.py
@@ -228,3 +228,9 @@ class UiSubplotTool(QtWidgets.QDialog):
         hbox2.addWidget(self.donebutton)
 
         self.donebutton.clicked.connect(self.accept)
+
+    def accept(self):
+        QtWidgets.QDialog.accept(self)
+
+    def close(self):
+        QtWidgets.QDialog.close(self)

diff --git IPython/external/qt_for_kernel.py IPython/external/qt_for_kernel.py
index 1a94e7e0a..49a74e943 100644
--- IPython/external/qt_for_kernel.py
+++ IPython/external/qt_for_kernel.py
@@ -34,10 +34,10 @@
 from IPython.utils.version import check_version
 from IPython.external.qt_loaders import (load_qt, loaded_api, QT_API_PYSIDE,
                                          QT_API_PYSIDE2, QT_API_PYQT, QT_API_PYQT5,
-                                         QT_API_PYQTv1, QT_API_PYQT_DEFAULT)
+                                         QT_API_PYQTv1, QT_API_PYQT_DEFAULT, QT_API_PYTHONQT)
 
 _qt_apis = (QT_API_PYSIDE, QT_API_PYSIDE2, QT_API_PYQT, QT_API_PYQT5, QT_API_PYQTv1,
-            QT_API_PYQT_DEFAULT)
+            QT_API_PYQT_DEFAULT, QT_API_PYTHONQT)
 
 #Constraints placed on an imported matplotlib
 def matplotlib_options(mpl):
diff --git IPython/external/qt_loaders.py IPython/external/qt_loaders.py
index b09be86d5..ce85c1c44 100644
--- IPython/external/qt_loaders.py
+++ IPython/external/qt_loaders.py
@@ -22,6 +22,7 @@
 QT_API_PYQT_DEFAULT = 'pyqtdefault' # use system default for version 1 vs. 2
 QT_API_PYSIDE = 'pyside'
 QT_API_PYSIDE2 = 'pyside2'
+QT_API_PYTHONQT = 'pythonqt'
 
 api_to_module = {QT_API_PYSIDE2: 'PySide2',
                  QT_API_PYSIDE: 'PySide',
@@ -29,6 +30,7 @@
                  QT_API_PYQTv1: 'PyQt4',
                  QT_API_PYQT5: 'PyQt5',
                  QT_API_PYQT_DEFAULT: 'PyQt4',
+                 QT_API_PYTHONQT: 'PythonQt',
                 }
 
 
@@ -68,18 +70,27 @@ def commit_api(api):
         ID.forbid('PySide')
         ID.forbid('PyQt4')
         ID.forbid('PyQt5')
+        ID.forbid('PythonQt')
     if api == QT_API_PYSIDE:
         ID.forbid('PySide2')
         ID.forbid('PyQt4')
         ID.forbid('PyQt5')
+        ID.forbid('PythonQt')
     elif api == QT_API_PYQT5:
         ID.forbid('PySide2')
         ID.forbid('PySide')
         ID.forbid('PyQt4')
+        ID.forbid('PythonQt')
+    elif api == QT_API_PYTHONQT:
+        ID.forbid('PySide2')
+        ID.forbid('PySide')
+        ID.forbid('PyQt4')
+        ID.forbid('PyQt5')
     else:   # There are three other possibilities, all representing PyQt4
         ID.forbid('PyQt5')
         ID.forbid('PySide2')
         ID.forbid('PySide')
+        ID.forbid('PythonQt')
 
 
 def loaded_api():
@@ -103,6 +114,8 @@ def loaded_api():
         return QT_API_PYSIDE2
     elif 'PyQt5.QtCore' in sys.modules:
         return QT_API_PYQT5
+    elif 'PythonQt.QtCore' in sys.modules:
+        return QT_API_PYTHONQT
     return None
 
 
@@ -152,13 +165,18 @@ def has_binding_new(api):
 
         Parameters
         ----------
-        api : str [ 'pyqtv1' | 'pyqt' | 'pyqt5' | 'pyside' | 'pyside2' | 'pyqtdefault']
+        api : str [ 'pyqtv1' | 'pyqt' | 'pyqt5' | 'pyside' | 'pyside2' | 'pyqtdefault' | 'pythonqt' ]
              Which module to check for
 
         Returns
         -------
         True if the relevant module appears to be importable
      """
+
+    if api == QT_API_PYTHONQT:
+        # PythonQt modules don't have __spec__ nor __path__ defined.
+        return True
+
     module_name = api_to_module[api]
     from importlib.util import find_spec
 
@@ -277,6 +295,18 @@ def import_pyqt5():
     return QtCore, QtGuiCompat, QtSvg, api
 
 
+def import_pythonqt():
+    """
+    Import PythonQt
+
+    ImportErrors rasied within this function are non-recoverable
+    """
+    from PythonQt import QtCore, QtSvg, QtGui
+
+    api = QT_API_PYTHONQT
+    return QtCore, QtGui, QtSvg, api
+
+
 def import_pyside():
     """
     Import PySide
@@ -335,7 +365,8 @@ def load_qt(api_options):
                QT_API_PYQT: import_pyqt4,
                QT_API_PYQT5: import_pyqt5,
                QT_API_PYQTv1: partial(import_pyqt4, version=1),
-               QT_API_PYQT_DEFAULT: partial(import_pyqt4, version=None)
+               QT_API_PYQT_DEFAULT: partial(import_pyqt4, version=None),
+               QT_API_PYTHONQT: import_pythonqt,
               }
 
     for api in api_options:
@@ -356,18 +387,20 @@ def load_qt(api_options):
     else:
         raise ImportError("""
     Could not load requested Qt binding. Please ensure that
-    PyQt4 >= 4.7, PyQt5, PySide >= 1.0.3 or PySide2 is available,
+    PyQt4 >= 4.7, PyQt5, PythonQt, PySide >= 1.0.3 or PySide2 is available,
     and only one is imported per session.
 
     Currently-imported Qt library:                              %r
     PyQt4 available (requires QtCore, QtGui, QtSvg):            %s
     PyQt5 available (requires QtCore, QtGui, QtSvg, QtWidgets): %s
+    PythonQt available (requires QtCore, QtGui, QtSvg, QtWidgets): %s
     PySide >= 1.0.3 installed:                                  %s
     PySide2 installed:                                          %s
     Tried to load:                                              %r
     """ % (loaded_api(),
            has_binding(QT_API_PYQT),
            has_binding(QT_API_PYQT5),
+           has_binding(QT_API_PYTHONQT),
            has_binding(QT_API_PYSIDE),
            has_binding(QT_API_PYSIDE2),
            api_options))
diff --git IPython/lib/guisupport.py IPython/lib/guisupport.py
index 5e13d4343..2059e35c2 100644
--- IPython/lib/guisupport.py
+++ IPython/lib/guisupport.py
@@ -124,27 +124,23 @@ def is_event_loop_running_qt4(app=None):
     # New way: check attribute on shell instance
     ip = get_ipython()
     if ip is not None:
-        return ip.active_eventloop and ip.active_eventloop.startswith('qt')
+        return ip.active_eventloop and ip.active_eventloop.contains('qt')
 
     # Old way: check attribute on QApplication singleton
     if app is None:
         app = get_app_qt4([''])
-    if hasattr(app, '_in_event_loop'):
-        return app._in_event_loop
-    else:
-        # Does qt4 provide a other way to detect this?
-        return False
+    return app.property('in_event_loop') == 1
 
 def start_event_loop_qt4(app=None):
     """Start the qt4 event loop in a consistent manner."""
     if app is None:
         app = get_app_qt4([''])
     if not is_event_loop_running_qt4(app):
-        app._in_event_loop = True
+        app.setProperty('in_event_loop', 1)
         app.exec_()
-        app._in_event_loop = False
+        app.setProperty('in_event_loop', 0)
     else:
-        app._in_event_loop = True
+        app.setProperty('in_event_loop', 0)
 
 #-----------------------------------------------------------------------------
 # Tk
diff --git IPython/terminal/pt_inputhooks/__init__.py IPython/terminal/pt_inputhooks/__init__.py
index 3766973e8..f6f227b48 100644
--- IPython/terminal/pt_inputhooks/__init__.py
+++ IPython/terminal/pt_inputhooks/__init__.py
@@ -7,7 +7,7 @@
 }
 
 backends = [
-    'qt', 'qt4', 'qt5',
+    'qt', 'qt4', 'qt5', 'pythonqt',
     'gtk', 'gtk2', 'gtk3',
     'tk',
     'wx',
@@ -44,6 +44,9 @@ def get_inputhook_name_and_func(gui):
     if gui == 'qt5':
         os.environ['QT_API'] = 'pyqt5'
         gui_mod = 'qt'
+    elif gui == 'pythonqt':
+        os.environ['QT_API'] = 'pythonqt'
+        gui_mod = 'qt'
 
     mod = importlib.import_module('IPython.terminal.pt_inputhooks.'+gui_mod)
     return gui, mod.inputhook

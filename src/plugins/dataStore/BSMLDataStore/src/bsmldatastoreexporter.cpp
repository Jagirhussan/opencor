/*******************************************************************************

Licensed to the OpenCOR team under one or more contributor license agreements.
See the NOTICE.txt file distributed with this work for additional information
regarding copyright ownership. The OpenCOR team licenses this file to you under
the Apache License, Version 2.0 (the "License"); you may not use this file
except in compliance with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.

*******************************************************************************/

//==============================================================================
// BioSignalML data store exporter class
//==============================================================================

#include "bsmldatastoreexporter.h"
#include "biosignalml/biosignalml.h"
#include "biosignalml/data/hdf5.h"

//==============================================================================


//==============================================================================

#include <QApplication>
#include <QFile>
#include <QTextStream>

//==============================================================================

namespace OpenCOR {
namespace BSMLDataStore {

//==============================================================================

BioSignalMLExporter::BioSignalMLExporter(QMainWindow *pMainWindow, const QString &pId) :
    DataStore::DataStoreExporter(pId),
    mSaveDialog(new BioSignalMLSaveDialog(pMainWindow))
{
}

//==============================================================================

void BioSignalMLExporter::execute(DataStore::DataStore *pDataStore) const
{
    // Export the given data store to a BioSignalML file

// set comment
    QString comment = "Generated by OpenCOR ....";

    mSaveDialog->setComment(comment);
    if (mSaveDialog->run()) {

        QString fileName = mSaveDialog->fileName();

        // To come from user dialog... (And restrict to http: scheme ??)
        // Or use URI in repository??
        std::string rec_uri = pDataStore->uri().toStdString();

        std::string base_units = "http://www.cellml.org/units/"
                                + pDataStore->id().toStdString()
                                + "#";

        bsml::HDF5::Recording *recording = nullptr;
        try {
            recording = new bsml::HDF5::Recording(rec_uri, fileName.toStdString(), true);
            recording->set_comment(comment.toStdString());
            recording->set_label(mSaveDialog->shortName().toStdString()) ;
            recording->set_description(mSaveDialog->description().toStdString()) ;
            recording->set_investigator(rdf::Literal(mSaveDialog->author().toStdString())) ;

            recording->add_prefix(rdf::Namespace("units", base_units)) ;

            DataStore::DataStoreVariable *voi = pDataStore->voi();
            auto clock = recording->new_clock(voi->uri().toStdString(),
                                              rdf::URI(base_units + voi->unit().toStdString()),
                                              voi->values(), voi->size());
            clock->set_label(voi->label().toStdString()) ;
//std::cout << clock->uri() << "  |  " << clock->units() << "  |  " << clock->label() << std::endl ;

            DataStore::DataStoreVariables variables = pDataStore->variables();
            auto variableBegin = variables.constBegin();
            auto variableEnd = variables.constEnd();

            std::vector<const std::string> uris;
            std::vector<const rdf::URI> units;
            for (auto variable = variableBegin; variable != variableEnd; ++variable) {
                uris.push_back((*variable)->uri().toStdString());
                units.push_back(rdf::URI(base_units + (*variable)->unit().toStdString()));
            }

            auto sigs = recording->new_signalarray(uris, units, clock) ;
            size_t nvars = variables.size();
            for (size_t i = 0 ;  i < nvars ;  ++i) {
                (*sigs)[i]->set_label(variables[i]->label().toStdString()) ;
//std::cout << (*sigs)[i]->uri()   << "  |  "
//          << (*sigs)[i]->units() << "  |  "
//          << (*sigs)[i]->label() << std::endl ;
            }

#define BUFFER_ROWS 50000
            double *data = new double[BUFFER_ROWS*nvars];
            double *dp = data;
            int rowcount = 0;

            for (qulonglong i = 0; i < pDataStore->size(); ++i) {
                for (auto variable = variableBegin; variable != variableEnd; ++variable)
                    *dp++ = (*variable)->value(i);
                ++rowcount;
                if (rowcount >= BUFFER_ROWS) {
                    sigs->extend(data, BUFFER_ROWS*nvars);
                    dp = data;
                    rowcount = 0;
                }

                qApp->processEvents();
//---GRY--- THE CALL TO qApp->processEvents() SHOULD BE REMOVED AND THE EXPORTER
//              BE SUCH THAT IT DOESN'T BLOCK THE MAIN THREAD (E.G. WHEN EXPORTING
//              LONG SIMULATIONS). MAYBE THIS COULD BE DONE BY MAKING THE EXPORTER
//              WORK IN ITS OWN THREAD?...
            }

            sigs->extend(data, rowcount*nvars);

            delete[] data;
        }

        catch (bsml::data::Exception e) {
            std::cerr << "EXCEPTION: " << e.what() << std::endl;
                                        // **** Need to bring up alert....
        }

        if (recording != nullptr) {
            recording->close();
            delete recording;
        }

    }

}

//==============================================================================

}   // namespace BSMLDataStore
}   // namespace OpenCOR

//==============================================================================
// End of file
//==============================================================================

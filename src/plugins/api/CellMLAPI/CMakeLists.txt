PROJECT(CellMLAPIPlugin)

MACRO(RETRIEVE_CELLML_API_SETTINGS)
    # Retrieve CellML API settings

    IF(WIN32)
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_IMPORT_LIBRARY_PREFIX}annotools${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}ccgs${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celeds${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celedsexporter${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cellml${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cevas${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cuses${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}malaes${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}vacss${CMAKE_IMPORT_LIBRARY_SUFFIX}
        )

        SET(CELLML_API_EXTERNAL_BINARIES_FOR_DEPLOYMENT
            annotools ccgs celeds celedsexporter cellml cevas cuses malaes vacss)
    ELSEIF(APPLE)
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs.3${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss.1${CMAKE_SHARED_LIBRARY_SUFFIX}
        )
    ELSE()
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs${CMAKE_SHARED_LIBRARY_SUFFIX}.3
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss${CMAKE_SHARED_LIBRARY_SUFFIX}.1
        )
    ENDIF()

    # Ignore some warnings on Windows

    IF(WIN32)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4091 /wd4290")
        # Note: on Windows, some warnings get generated. Yet, we have nothing to
        #       do with them, so...
    ENDIF()
ENDMACRO()

# Retrieve the plugin's binary file(s)

STRING(REPLACE "${${CMAKE_PROJECT_NAME}_SOURCE_DIR}/" "" RELATIVE_PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR}")

IF(WIN32)
    IF(RELEASE_MODE)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 06a4d0e1b109650c0f7667e042748bf09d0b4ef1)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib bf52b6ddb846862cd5da0e10c33d117342695467)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll f248ab4908016c70c579a931320b65e38ed0bd23)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib c793ede820122877c23d803eeba19f1cb1c8813d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll 706bd3b6c9d5f142450e2a6518f782a6c6ea4fff)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib 588eeb2dbd4e5cf99409cec7654d0a548da5f961)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll c15d0b834e44fb9b1084a4638db926a48a86b915)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib f6bbe962ac86b8ea21b72f9bd3ae1636e8ea9fd0)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll 8e65c88c56b481d8b751b1b0dd7021d93d6db5a1)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib 39e568c1f57523bdc3aca2729668ec7e450fa19d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll c1d9021fe928ec6206d5d0cde0b2d63acc94b3e9)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 0ab803d98322745bd5e5fc4534cdec8a1e445e30)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll 161946c245272c3b267217a1f236675c223c3431)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib c8d4e0aadf816e51aadf27b9ee309486d2bcc870)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll cbe68dc5f6f14a2a6bebbc22bc02d88d459346f7)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib 7cc303d6868e3e906badabb764a45f69207cf984)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 1911efa789209d629ba36d2d15410b3b94a7d46a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib 2776502897699bee7723a264afdae02dfe889c53)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 1aac38f04175ff938d0e747ea2acdcd6682f2304)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib cfc1ed494bb3cfcdb155bfa074f8deb932ce3e29)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll ea12934f42d1e3aad76ad339e12df6bf45d1320a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib 86829f979b73594c5f0cef8a7bfd5531b6868f82)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll afdfcee332d423e62e9bfbf741445c1a68650ee3)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib b7020cc9078c59a2be6824865c1226d66907c86c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll ce6b3e7d4e2c1ae556ec92e8039db08f7c3338f8)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib e0fabc52f222fb28778603b77c9047eee0042195)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll 51587116ab416583dbb78c97c2baa9c93be21b52)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib a9207aeae320ccdd0a63a8de30fb0c2864cb7e93)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll 3f259661374675a60b75f35a3bf6ac244ebeb599)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 91f79c16d51b2f78f318bbb7fc028a4188a721f0)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll d555197ea8663207d4bc77962a6e5fcf33209701)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib b90362afd902daef2869e5c810e7513cf1d8a8ff)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll 87f497d68e9ebec586117d69e8e81f511c628bcf)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib 79aac898a2b192856fdf5f5c24cae65e8211d540)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 8bc22751e223d29805ec9ead7d715e9622598252)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib 1a0a6aa33de2a1fd5cff77a6decc42289ff12dbf)
    ENDIF()
ELSEIF(APPLE)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.2.dylib 7f415622cc839b0c7c333595eacad6f3f69838f4)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.3.dylib 8e839b81cd08efe6a5b70fa8f1ad65ac30e8e48e)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.1.dylib 27cd81f61428711fcec53a98d04d6e5e1a91d4d8)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.1.dylib 4e3b7ce2f86f773a2cec5ad1947193da5f360a5d)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.2.dylib ad703f2707428e06bc2a518fbd69f7e156700dc0)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.1.dylib ed23007d62c213b8744575a3dad275e7c5878b11)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.1.dylib 9074aae9466190ad39c527f4876da62459f70bb7)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.1.dylib 82be3a4dc13526c4fbc567aacc290401f391ac2f)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.1.dylib 59b811f94f7e63aefa9fd0455e3ac327130bf80c)
ELSE()
    IF(${ARCHITECTURE} EQUAL 32)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 42ff3297b898aac96639f4301dedbe8323fce74c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.3 11124de854711993ce6f07af73bef33772910ea2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 3ae430873477d6edadcdaa9c247177158d912090)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 c544ab9b5f2e70c3a60ecabd6be6abcc04d68225)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 2996faad4ab347504c452ecbf8f0f7d7c0a87ae2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 ccfa6b22d05646880b6c6045d3afbd11cde2f3a1)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 e7ba6c98576cbb11ba7501401b720f91b27f52f7)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 c15fe256350f63ab9db665971465311dd7772f6f)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 0e6a8943a4d2ea7af8c5716c1c67341e8b15a82e)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 7aad996a2fd94e52ac09141ac4fcbe6a7c22c5f5)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.3 0c5e7243a1b582931bb537568c836ee962d4907c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 f95b532331f090ad04aa0d2eb881b6da497896b9)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 c71a5bdb5e70f75989a5554d1746595478edaa5b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 4f5472864d7ba93e0ad693dc61b6edc937430250)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 6c475af8ef286ae53cfcf0a82ae6c9505962966d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 d75453e801cdd8a92e68e178529e0fb8344bfe9f)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 f042fc8889d9845b20d9a310009769054bead87d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 68fac8ae817c14873c34830838ba07c0a26d4fe8)
    ENDIF()
ENDIF()

# CellML API libraries

SET(CELLML_API_EXTERNAL_BINARIES_DIR ${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR})

RETRIEVE_CELLML_API_SETTINGS()

# Add the plugin

ADD_PLUGIN(CellMLAPI
    SOURCES
        ../../plugininfo.cpp

        src/cellmlapiplugin.cpp
    HEADERS_MOC
        src/cellmlapiplugin.h
    INCLUDE_DIRS
        include
        src
    QT_MODULES
        Core
    QT_LIBRARIES
        QtCore
    EXTERNAL_BINARIES_DIR
        ${CELLML_API_EXTERNAL_BINARIES_DIR}
    EXTERNAL_BINARIES
        ${CELLML_API_EXTERNAL_BINARIES}
)

# Deploy the plugin's external binaries
# Note: it must be done here since ADD_PLUGIN doesn't support the fact that an
#       external binary may have dependencies (something that is important on OS
#       X)...

IF(WIN32)
    FOREACH(CELLML_API_EXTERNAL_BINARY_FOR_DEPLOYMENT ${CELLML_API_EXTERNAL_BINARIES_FOR_DEPLOYMENT})
        WINDOWS_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR}
                               ${CMAKE_SHARED_LIBRARY_PREFIX}${CELLML_API_EXTERNAL_BINARY_FOR_DEPLOYMENT}${CMAKE_SHARED_LIBRARY_SUFFIX})
    ENDFOREACH()
ELSEIF(APPLE)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} annotools.2
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} ccgs.3
                        annotools.2 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} celeds.1
                        cellml.2 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} celedsexporter.1
                        annotools.2 ccgs.3 celeds.1 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cevas.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cuses.1
                        annotools.2 cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} malaes.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} vacss.1
                        annotools.2 cellml.2 cuses.1)
ELSE()
    FOREACH(CELLML_API_EXTERNAL_BINARY ${CELLML_API_EXTERNAL_BINARIES})
        LINUX_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR}
                             ${CELLML_API_EXTERNAL_BINARY})
    ENDFOREACH()
ENDIF()

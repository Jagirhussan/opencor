PROJECT(CellMLAPIPlugin)

MACRO(RETRIEVE_CELLML_API_SETTINGS)
    # Retrieve CellML API settings

    IF(WIN32)
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_IMPORT_LIBRARY_PREFIX}annotools${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}ccgs${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celeds${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celedsexporter${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cellml${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cevas${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cuses${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}malaes${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}vacss${CMAKE_IMPORT_LIBRARY_SUFFIX}
        )

        SET(CELLML_API_EXTERNAL_BINARIES_FOR_DEPLOYMENT
            annotools ccgs celeds celedsexporter cellml cevas cuses malaes vacss)
    ELSEIF(APPLE)
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs.3${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss.1${CMAKE_SHARED_LIBRARY_SUFFIX}
        )
    ELSE()
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs${CMAKE_SHARED_LIBRARY_SUFFIX}.3
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss${CMAKE_SHARED_LIBRARY_SUFFIX}.1
        )
    ENDIF()

    # Ignore some warnings on Windows

    IF(WIN32)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4091 /wd4290")
        # Note: on Windows, some warnings get generated. Yet, we have nothing to
        #       do with them, so...
    ENDIF()
ENDMACRO()

# Retrieve the plugin's binary file(s)

STRING(REPLACE "${${CMAKE_PROJECT_NAME}_SOURCE_DIR}/" "" RELATIVE_PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR}")

IF(WIN32)
    IF(RELEASE_MODE)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 9500380850b0b1546b67efc678d3d6aefdc27078)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib bfd4eca41e35b1a8b0d50f88855c913d5357eb4a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll 041a5e9aba45ce76a0951347d78822f5bf21f280)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib 8badb7c2aa1ae2302ffcd5cb38c21d0ce75b6b53)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll 2027b93601cd20bd8069194c7e093064d5960cfa)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib 209a4b7c0c1c8b11c068d45a72ef3f0b7525dffc)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll f408f79a7b68b8272c70556e4e494ed8da9f2dc3)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib c3402c9910569610c16a3e2a61c9c428b547d61d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll 5e3fcb22ab3e1058855f8a881a956fa487a7efa6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib e74e60aa7faa936a723354621852084616cd6d44)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll faa958edd4034e1cbbd8dc13938a830b3fba34c9)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 4f5bfd7d192c0e3a3b6fd62d114a942412e62c9e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll 873e4a58d41e545835594779d15f07afee608ed6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib 118c53d32455f1cefd587335b528a2795060b806)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll 79c4b6f74629345d7701cfd68d8a84114e5649f4)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib 651ea0ef7d0bbe79e91a1c99017b098bf2bfd5a8)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 13510432a35b73e6d665bd3ca4c556b207b81586)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib f2caa60c0780202fbe551f0cd214c1300c117496)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 4377e80fa7e8f52750962ef74d358541dc476664)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib 849e6502ba25e9cf9c333b18b76115dd0e606b16)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll 3fa47a5aaa1fa40c4fc6da2355fdbb1e38a83ac7)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib c5cc2bc07d22f7591c48e9a68caf428762af14a3)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll 5a15fe5aafc859587c5995c86ef43263033ad2ae)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib 60fcdaa74cd6b58e290bfba96dd53d91dbf06abd)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll 4c904f6136ccdb9aa859c4e3cd77c4d1bf7f5571)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib b274040fa04479f2d22b97d3fb5f8b22a9487eff)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll 09f6574e3a63626b74a2deb4724f3d162a07c044)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib 250697acc2cce6dce40c9c4b28789f8d0749bef0)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll 25ddf6a0a07637d60175bec77042eeee848e7fa1)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 14bd6c728466c7287707bf4b9bad5cae0828a923)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll 8cd8865f1af902589bc5c493013ceeaae5d895f0)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib bd894e93738b1905466327d202fb44d662afebf6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll 8cd3103ce2000c203da60e3741a23a0c3759d92b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib 91e09a137d31754d9e4caf5d978da3523790fd53)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 698db978708e26fbe5cede6ff9e31e01a59fe627)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib 01234ea337cb852637fde823a3103a3b977037e9)
    ENDIF()
ELSEIF(APPLE)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.2.dylib 7f415622cc839b0c7c333595eacad6f3f69838f4)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.3.dylib 8e839b81cd08efe6a5b70fa8f1ad65ac30e8e48e)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.1.dylib 27cd81f61428711fcec53a98d04d6e5e1a91d4d8)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.1.dylib 4e3b7ce2f86f773a2cec5ad1947193da5f360a5d)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.2.dylib ad703f2707428e06bc2a518fbd69f7e156700dc0)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.1.dylib ed23007d62c213b8744575a3dad275e7c5878b11)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.1.dylib 9074aae9466190ad39c527f4876da62459f70bb7)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.1.dylib 82be3a4dc13526c4fbc567aacc290401f391ac2f)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.1.dylib 59b811f94f7e63aefa9fd0455e3ac327130bf80c)
ELSE()
    IF(${ARCHITECTURE} EQUAL 32)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 b7b5bc1287ca4d3bedc46f8e0b549450c0529c32)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.3 efba3d90d2bedb99e89044cc4d5413eaec80e2db)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 ad1ad8aafe530dbe8f859a00f5359ddb567d0dcc)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 188201f2ce19678fd9ff316449467ea666ab9646)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 2996faad4ab347504c452ecbf8f0f7d7c0a87ae2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 3b807440e5dda08c632c01b55dc55b0a3eedebd1)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 397aa0e000a22b7a3b99c20f225a35be5a902089)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 076f1ab534ce798cab2009ee8dd9bd3684be4ff6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 db41fcccde952c050ed009e2c3f079184c4fdd13)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 5d442f33e1126c6970be457c0ff6695596df7cd3)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.3 f754065e702a6c32c9115d95ea2b87fbb48739ce)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 5f9325a638ec3c07c318e560480617e10ae53ccc)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 0065da79c07df7db79c6bd3147cd4b70a62f4af2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 4f5472864d7ba93e0ad693dc61b6edc937430250)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 c19c98ec39f2f38b2f740b7a7ec20997320ce138)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 efbd28c932b136f76779d850f14a94404b9ced69)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 bb657d53e1e686b165f2548c668c71d153dca7fc)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 a7f8822410c6d98bb2b7d0781ae9180c2c3cf0eb)
    ENDIF()
ENDIF()

# CellML API libraries

SET(CELLML_API_EXTERNAL_BINARIES_DIR ${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR})

RETRIEVE_CELLML_API_SETTINGS()

# Add the plugin

ADD_PLUGIN(CellMLAPI
    SOURCES
        ../../plugininfo.cpp

        src/cellmlapiplugin.cpp
    HEADERS_MOC
        src/cellmlapiplugin.h
    INCLUDE_DIRS
        include
        src
    QT_MODULES
        Core
    QT_LIBRARIES
        QtCore
    EXTERNAL_BINARIES_DIR
        ${CELLML_API_EXTERNAL_BINARIES_DIR}
    EXTERNAL_BINARIES
        ${CELLML_API_EXTERNAL_BINARIES}
)

# Deploy the plugin's external binaries
# Note: it must be done here since ADD_PLUGIN doesn't support the fact that an
#       external binary may have dependencies (something that is important on OS
#       X)...

IF(WIN32)
    FOREACH(CELLML_API_EXTERNAL_BINARY_FOR_DEPLOYMENT ${CELLML_API_EXTERNAL_BINARIES_FOR_DEPLOYMENT})
        WINDOWS_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR}
                               ${CMAKE_SHARED_LIBRARY_PREFIX}${CELLML_API_EXTERNAL_BINARY_FOR_DEPLOYMENT}${CMAKE_SHARED_LIBRARY_SUFFIX})
    ENDFOREACH()
ELSEIF(APPLE)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} annotools.2
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} ccgs.3
                        annotools.2 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} celeds.1
                        cellml.2 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} celedsexporter.1
                        annotools.2 ccgs.3 celeds.1 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cevas.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cuses.1
                        annotools.2 cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} malaes.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} vacss.1
                        annotools.2 cellml.2 cuses.1)
ELSE()
    FOREACH(CELLML_API_EXTERNAL_BINARY ${CELLML_API_EXTERNAL_BINARIES})
        LINUX_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR}
                             ${CELLML_API_EXTERNAL_BINARY})
    ENDFOREACH()
ENDIF()

PROJECT(CellMLAPIPlugin)

MACRO(RETRIEVE_CELLML_API_SETTINGS)
    # Retrieve CellML API settings

    IF(WIN32)
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_IMPORT_LIBRARY_PREFIX}annotools${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}ccgs${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celeds${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celedsexporter${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cellml${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cevas${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cuses${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}malaes${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}vacss${CMAKE_IMPORT_LIBRARY_SUFFIX}
        )

        SET(CELLML_API_EXTERNAL_BINARIES_FOR_DEPLOYMENT
            annotools ccgs celeds celedsexporter cellml cevas cuses malaes vacss)
    ELSEIF(APPLE)
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs.3${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss.1${CMAKE_SHARED_LIBRARY_SUFFIX}
        )
    ELSE()
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs${CMAKE_SHARED_LIBRARY_SUFFIX}.3
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss${CMAKE_SHARED_LIBRARY_SUFFIX}.1
        )
    ENDIF()

    # Ignore some warnings on Windows

    IF(WIN32)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4091 /wd4290")
        # Note: on Windows, some warnings get generated. Yet, we have nothing to
        #       do with them, so...
    ENDIF()
ENDMACRO()

# Retrieve the plugin's binary file(s)

STRING(REPLACE "${${CMAKE_PROJECT_NAME}_SOURCE_DIR}/" "" RELATIVE_PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR}")

IF(WIN32)
    IF(RELEASE_MODE)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 5fa9d1b1fd0437a968e9b8c9f8db47335f93e3fb)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib 462a87a1618d494e40c6d3922b0d055cf2ea694a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll d173aa04e8636ca1f4148425fbbbe2251b83980a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib 8016ba5b973c1ee25acaa73fb928e4e7a659d486)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll 830d59f5583de0e66202171c94a3c29df63219f9)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib df5045aa9a58a0199401f74f90f2823766c8143c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll 23fc4a78624f29ce31e79cca036be9c32248b4ee)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib 117b0f8af19fac3ddd5a8ef44ba5c592692d0aac)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll d8bd9b84c3f70c96ab89aa189eefd4ce616b61d2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib eca15c430dc44ef5806f91cacb990f0673b92d82)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll 5f98f2d121aff30981ef55535ed74fd299e03738)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 27b898881dc7896ab644fb5f97d766866a13646b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll 63cced7ffb3c85845118288b391a80f0ec0b5309)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib 7ccd9cf94a200bd3b3df2f8fe1e1aa6b1879043a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll 85d3a9bbea85df9d64a1a53190eb631d5969501a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib 1f7c370a0f995932919da1a4b00a22ed5891dad3)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll e351fac416d0ec6e2cabe517d246ceeb6384d840)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib eda11c8f42b871e14d849ab2403480e732dd89bc)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 0ea27abff1f58252f8025cf87b92089d4f1886f6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib 9a1c02523746691b3922ea6ad0ac20611f0b43fa)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll 477676f2c4e7ca86e610ef97b496ab22aad38078)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib 76ad197053f4e09aafe62ef2c05563e38dff4ccc)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll 2ffd7975e48a3cac337b0abe8a352ecca3c8fc9d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib fed7d880f5c5a34bef629c6d108033cb0f1e3220)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll f0f056a947f65351d093175124754b8091795d19)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib c0ed21c32fe6163a2963afafb5fd2a515b126242)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll 06a38f5911f9f27a688f724a878c138f55675ccc)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib 144c58b9d8268cd5f5374f1633f875c386b919dc)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll 70474efcd1088d2ccc70deac87a84b4d553e5ac6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib c9f29b7a8b387c951fc0e1ed41ea7e9612406784)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll 1e4a39f1d3d7d1f81973857c3e4f60f41abc616c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib 6b13ff79026d11f09a4eecd4ca2fe865c92b9ce0)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll 178188e3f8534b3047f28dc602572ddceb441ab3)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib 193399a5eeac367de997a45e7c290cbf1e5e23b3)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 05e18a06e1e5fa53dd0cb71a269c4c154bc09680)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib 557fea4843e2543358e85049193d4e74cf16afa2)
    ENDIF()
ELSEIF(APPLE)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.2.dylib 7f415622cc839b0c7c333595eacad6f3f69838f4)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.3.dylib 8e839b81cd08efe6a5b70fa8f1ad65ac30e8e48e)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.1.dylib 27cd81f61428711fcec53a98d04d6e5e1a91d4d8)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.1.dylib 4e3b7ce2f86f773a2cec5ad1947193da5f360a5d)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.2.dylib ad703f2707428e06bc2a518fbd69f7e156700dc0)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.1.dylib ed23007d62c213b8744575a3dad275e7c5878b11)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.1.dylib 9074aae9466190ad39c527f4876da62459f70bb7)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.1.dylib 82be3a4dc13526c4fbc567aacc290401f391ac2f)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.1.dylib 59b811f94f7e63aefa9fd0455e3ac327130bf80c)
ELSE()
    IF(${ARCHITECTURE} EQUAL 32)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 42ff3297b898aac96639f4301dedbe8323fce74c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.3 11124de854711993ce6f07af73bef33772910ea2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 3ae430873477d6edadcdaa9c247177158d912090)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 c544ab9b5f2e70c3a60ecabd6be6abcc04d68225)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 2996faad4ab347504c452ecbf8f0f7d7c0a87ae2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 ccfa6b22d05646880b6c6045d3afbd11cde2f3a1)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 e7ba6c98576cbb11ba7501401b720f91b27f52f7)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 c15fe256350f63ab9db665971465311dd7772f6f)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 0e6a8943a4d2ea7af8c5716c1c67341e8b15a82e)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 7aad996a2fd94e52ac09141ac4fcbe6a7c22c5f5)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.3 0c5e7243a1b582931bb537568c836ee962d4907c)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 f95b532331f090ad04aa0d2eb881b6da497896b9)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 c71a5bdb5e70f75989a5554d1746595478edaa5b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 4f5472864d7ba93e0ad693dc61b6edc937430250)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 6c475af8ef286ae53cfcf0a82ae6c9505962966d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 d75453e801cdd8a92e68e178529e0fb8344bfe9f)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 f042fc8889d9845b20d9a310009769054bead87d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 68fac8ae817c14873c34830838ba07c0a26d4fe8)
    ENDIF()
ENDIF()

# CellML API libraries

SET(CELLML_API_EXTERNAL_BINARIES_DIR ${PROJECT_SOURCE_DIR}/bin/${DISTRIB_BINARY_DIR})

RETRIEVE_CELLML_API_SETTINGS()

# Add the plugin

ADD_PLUGIN(CellMLAPI
    SOURCES
        ../../plugininfo.cpp

        src/cellmlapiplugin.cpp
    HEADERS_MOC
        src/cellmlapiplugin.h
    INCLUDE_DIRS
        include
        src
    QT_MODULES
        Core
    QT_LIBRARIES
        QtCore
    EXTERNAL_BINARIES_DIR
        ${CELLML_API_EXTERNAL_BINARIES_DIR}
    EXTERNAL_BINARIES
        ${CELLML_API_EXTERNAL_BINARIES}
)

# Deploy the plugin's external binaries
# Note: it must be done here since ADD_PLUGIN doesn't support the fact that an
#       external binary may have dependencies (something that is important on OS
#       X)...

IF(WIN32)
    FOREACH(CELLML_API_EXTERNAL_BINARY_FOR_DEPLOYMENT ${CELLML_API_EXTERNAL_BINARIES_FOR_DEPLOYMENT})
        WINDOWS_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR}
                               ${CMAKE_SHARED_LIBRARY_PREFIX}${CELLML_API_EXTERNAL_BINARY_FOR_DEPLOYMENT}${CMAKE_SHARED_LIBRARY_SUFFIX})
    ENDFOREACH()
ELSEIF(APPLE)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} annotools.2
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} ccgs.3
                        annotools.2 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} celeds.1
                        cellml.2 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} celedsexporter.1
                        annotools.2 ccgs.3 celeds.1 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cevas.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cuses.1
                        annotools.2 cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} malaes.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} vacss.1
                        annotools.2 cellml.2 cuses.1)
ELSE()
    FOREACH(CELLML_API_EXTERNAL_BINARY ${CELLML_API_EXTERNAL_BINARIES})
        LINUX_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR}
                             ${CELLML_API_EXTERNAL_BINARY})
    ENDFOREACH()
ENDIF()
